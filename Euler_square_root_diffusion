#I'm using the square root diffusion formula to model a mean reversion effect that occurs in markets. 
#A particular area that has seemed to rely on this idea is with inflation derivatives, such as inflation swaps or even interst rate swaps (though with the fed's more dovish stance towards inflation targeting this relationship might break down)
#In this implementation, the parameters kappa, theta and sigma correspond to a mean-reversion factor, the long term mean of the process, and a constant volatility parameter, respectively


def srd_euler(x0, intervals, T, paths, kappa, theta, sigma):
    xh = np.zeros((intervals+1, paths))
    x = np.zeros_like(xh)
    xh[0] = x0
    x[0] = x0
    for t in range(1, intervals+1):
        xh[t] = (xh[t-1] + kappa * (theta - np.maximum(xh[t-1], 0)) * (T/intervals) + sigma * np.sqrt(np.maximum(xh[t-1], 0)) * math.sqrt(T/intervals) * npr.standard_normal(paths))
    x = np.maximum(xh, 0)
    return x

#I'm initialising with arbitrary parameter values, with the intial value being above the long term mean

x1 = srd_euler(0.05, 50, 2, 10000, 3, 0.02, 0.1)

plt.figure(figsize=(10,6))
plt.plot(x1[:, :25], lw = 1)
plt.xlabel('time')
plt.ylabel('index')
plt.figure(figsize=(10,6))
plt.hist(x1[-1], bins=50)
plt.xlabel('value')
plt.ylabel('frequency')
