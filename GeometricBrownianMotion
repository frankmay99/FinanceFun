#I'll be using a BSM setup to simulate some future examples of stock price indices. I'm incorporating a discretised standard geometric brownian motion. 
#For now I'll ignore any lagged effects past 1 (implying a Markov process I think) to keep things simple- though I'm keen to write an evolution function for volatility at some point later any investigate what happens

import numpy as np
import math
import numpy.random as npr
from pylab import plt, mpl

def StochasticBSM(paths, intervals, time, init, riskless, sigma):
    S = np.zeros((intervals +1, paths));
    I = intervals
    S[0] = 100;
    for t in range(1, intervals +1):
        S[t] = S[t - 1] * np.exp((riskless - 0.5 * sigma**2) * (time/intervals) + sigma * math.sqrt((time/intervals)) * npr.standard_normal(paths))
    return S;
    
S = StochasticBSM(10000, 50, 2, 100, 0.05, 0.25);

plt.figure(figsize = (10,6))
plt.hist(S[-1], bins=50)
plt.xlabel('index level');
plt.ylabel('frequency');

plt.figure(figsize=(10,6))
plt.plot(S[:, :50], lw =1.5)
plt.xlabel('time');
plt.ylabel('index');
